temp;

// Complete the substrCount function below.
function substrCount(n, s) {
    let count = 0, cc = 0, cf = 0, chng, palim = false,min;
    for (let i = 1; i < n; i++) {
        if (s[i] == s[i - 1]) {
            count = count + cc + 1;
            if (s[i] == s[i + 1]) {
                cc++;
            } else {
                if (palim) {
                 min = Math.min(cf,cc+2);
                 count = min;
                 palim = false;
               
                }
                if (s[i] == s[i + 2]) {
                    
                    cf = cc + 2;
                    cc = 0;
                    palim = true;
                  
                } else{
                    cc = 0;
                }
            }
        }else {
            if(!palim ){
                if(s[i] == s[i-2]){
                    count = count+1;
                }
            }
            else{
                if(s[i] != s[i+1]) {
                  if(s[i] == s[i-2]){
                    count = count+1;
                    palim = false;
                    cc=0;
                    cf=0;
                }
            }
        }


    }

    }

    return count+n;

}



----------------------
let newFunc = async () => {

  let newPromise = () => {

  return (
    new Promise( function(res, rej) => {
      setTimeout(()=>{
         res('resoleve');
      },5000)
  })
  )

  } 

    let data = await newPromise();

}
 
 newFunc();


Testing your this knowledge in JavaScript: What is the output of the following code?
var length = 10;
function fn() {
    console.log(this.length);
}

var obj = {
  length: 5,
  method: function(fn) {
    fn();
    arguments[0]();
  }
};

obj.method(fn, 1);

output:=  5, 5
  




assuming d is an “empty” object in scope, 
say: var d = {};
             What is accomplished using the following code?
[ 'zebra', 'horse' ].forEach(function(k) {
    d[k] = undefined;
});
             
             console.log(d);

output: {
 //zebra : '',
// horse : ''
}

var x =[1, 2, 10, 3, 4, 6, 7, 1, 4, 5, 2, 3, 4, 8, 9].  Find the largest incremental subset.[ 2, 3, 4, 8, 9];


function subset (arr) {

  let maxsubset =[], temp =[];
  maxsubset.length =0;
  temp.push(arr[0)
  for(let i =1 ;i <arr.length; i++) {
    var obj = {}
    obj.a ='11'
    if(arr[i] > arr[i-1] ) {
      temp.push(arr[i]);
    }else {
      if(maxsubset.length < temp.length {
          maxsubset = [...temp];
            temp = [];
            temp.push(arr[i])
         }
    }
  
  fn add(){
    var b=20;
    return () => console.log(this.b)
  } //for
  
  console.log(b);
 if(maxsubset.length === 0) {
    maxsubset = [...temp];
 }
    
  return maxsubset
} //subset



























